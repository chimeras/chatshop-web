<?php

define("DONT_RUN_APP", true);
require('index.php');

class Setup
{

	private $_application,
			$_db,
			$_tables;

	public function __construct($application)
	{
		$this->_application = $application;
		if(APPLICATION_ENV != 'development'){
			exit('-');
		}
		$this->_application->bootstrap('config');
		$this->_application->bootstrap('db');
		$this->_db = $this->_application->getBootstrap()->getResource('db');
	}

	public function toCamelCase($string, $capitalizeFirstCharacter = true)
	{

		$str = str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));

		if (!$capitalizeFirstCharacter) {
			$str[0] = strtolower($str[0]);
		}

		return $str;
	}

	public function run()
	{
		$tables = $this->_getTables();
		foreach ($tables as $table) {
			$fp = fopen(APPLICATION_PATH . '/models/Db/Row/' . $this->toCamelCase($table) . ".php", "w");
			fwrite($fp, $this->_generateRowClass($table));
			fclose($fp);
			$tableName = substr($table, -1)== 'y' ? $this->toCamelCase(substr($table, 0, strlen($table)-1))."ie" : $this->toCamelCase($table);
			$fp = fopen(APPLICATION_PATH . '/models/Db/Table/' . $tableName . "s.php", "w");
			fwrite($fp, $this->_generateTableClass($table));
			fclose($fp);
			$filename = APPLICATION_PATH . '/models/' . $tableName . "s.php";
			if (!is_file($filename)) {
				$fp = fopen($filename, "w");
				fwrite($fp, $this->_generateTableModelClass($table));
				fclose($fp);
			}
			$filename = APPLICATION_PATH . '/models/' . $this->toCamelCase($table) . ".php";
			if (!is_file($filename)) {
				$fp = fopen($filename, "w");
				fwrite($fp, $this->_generateRowModelClass($table));
				fclose($fp);
			}
		}
	}

	private function _generateMethods($name)
	{
		$table = $this->_getTableStructure($name);
		$methodsString = '';
		foreach ($table as $key => $row) {
			$methodsString .= $this->_generateGetterSetter($key);
			if ($row == 'MUL') {
				
			}
			if ($row == 'PRI') {
				$methodsString .= "\n\n";
				$methodsStringeee = <<<MMMM
	public function getId()
	{
		return \$this->$key;
	}
MMMM;
			}
		}

		return $methodsString;
	}

	private function _generateRowClass($name)
	{
		$methods = $this->_generateMethods($name);
		$class = "<?php\nabstract class Application_Model_Db_Row_" . $this->toCamelCase($name) . " extends Zend_Db_Table_Row_Abstract{\n\n";

		$class .= "\tpublic function __construct(array \$config = array())\n";
		$class .= "\t{\n";
		$class .= "\t\tparent::__construct(\$config);\n";
		$class .= "\t}\n\n";
		$class .= $methods;
		$class .= "\n} /*generated by setup*/";
		return $class;
		//protected $_name = 'badge';
	}

	private function _generateTableClass($name)
	{
		$tableName = substr($name, -1)== 'y' ? $this->toCamelCase(substr($name, 0, strlen($name)-1))."ie" : $this->toCamelCase($name);
		$class = <<<CLSS
<?php
abstract class Application_Model_Db_Table_{$this->toCamelCase($tableName)}s extends Zend_Db_Table_Abstract
{
	protected \$_name = '$name';
	protected \$_rowClass = 'Application_Model_{$this->toCamelCase($name)}';
//	protected \$_primary = '{$name}_id';
	protected \$_primary = 'id';
/**
	 *
	 * @param integer \$id
	 * @return Application_Model_{$this->toCamelCase($name)} 
	 */
	public function fetch(\$id)
	{
		//return \$this->fetchRow('{$name}_id=' . \$id);
		return \$this->fetchRow('id=' . \$id);
	}
} /*generated by setup*/
CLSS;


		return $class;
		//protected $_name = 'badge';
	}

	private function _generateTableModelClass($name)
	{
		$class = <<<CLSS
<?php
class Application_Model_{$this->toCamelCase($name)}s extends Application_Model_Db_Table_{$this->toCamelCase($name)}s
{

} /*generated by setup*/
CLSS;
		return $class;
	}

	private function _generateRowModelClass($name)
	{
		$class = <<<CLSS
<?php
class Application_Model_{$this->toCamelCase($name)} extends Application_Model_Db_Row_{$this->toCamelCase($name)}
{

} /*generated by setup*/
CLSS;
		return $class;
	}

	private function _generateGetterSetter($field)
	{
		$methodName = $this->toCamelCase($field);
		$string = "\n\n";
		$string .= "\tpublic function get$methodName()\n\t{\n";
		$string .= "\t\treturn \$this->$field;\n";
		$string .= "\t}";

		$string .= "\n\n";
		$string .= "\tpublic function set$methodName(\$$field)\n\t{\n";
		$string .= "\t\t\$this->$field = \$$field;\n";
		$string .= "\t\treturn \$this;\n";
		$string .= "\t}";


		return $string;
	}

	private function _getTables()
	{
		$tables = !is_null($this->_tables) ? $this->_tables : $this->_setTables();
		return $tables;
	}

	private function _setTables()
	{
		$sql = "SHOW TABLES";
		$this->_tables = array();
		$result = $this->_db->fetchAll($sql);
		foreach ($result as $rowTableName) {
			$rowTableName = array_values($rowTableName);
			$this->_tables[] = $rowTableName[0];
		}
		return $this->_tables;
	}

	private function _getTableStructure($table)
	{
		$structure = array();
		$sql = "DESCRIBE " . $table;
		$result = $this->_db->fetchAll($sql);
		foreach ($result as $row) {
			$structure[$row['Field']] = $row['Key'];
			//echo $this->toCamelCase($row['Field']) . "-";
		}
		return $structure;
	}

}

$setup = new Setup($application);
$setup->run();